// WARNING: This file was autogenerated by MBRS generator.
// Do not update it because if you run generator again you changes will be deleted

package {{ model.package }};


import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;

import java.util.List;
import java.lang.Exception;
import ftn.backendservice.exception.exceptions.NotFoundException;
import ftn.backendservice.exception.exceptions.BadRequestException;
import java.util.Optional;

import ftn.backendservice.domain.entities.{{ model.class_name }};
import ftn.backendservice.repositories.{{ model.repository_class_name }};


@Service
@RequiredArgsConstructor
public class {{ model.class_name }}Service {

    private final {{ model.repository_class_name }} {{ model.repository_name }};

    public List<{{ model.class_name }}> getAll() {
        return {{ model.repository_name }}.findAll();
    }

    public {{ model.class_name }} getById(Long id) {
        Optional<{{ model.class_name }}> optional = {{ model.repository_name }}.findById(id);
        return optional.orElseThrow(() -> new NotFoundException("{{ model.class_name }} not found with id: " + id));
    }

    public {{ model.class_name }} save({{ model.class_name }} {{ model.class_variable }}) {
        return {{ model.repository_name }}.save({{ model.class_variable }});
    }

    public {{ model.class_name }} update({{ model.class_name }} updated{{ model.class_name }}) {
        // Check if the entyty exists in the database
        {{ model.class_name }} existing{{ model.class_name }} = {{ model.repository_name }}.findById(updated{{ model.class_name }}.getId())
                .orElseThrow(() -> new BadRequestException("{{ model.class_name }} not found with id: " + updated{{ model.class_name }}.getId()));

        // Update the properties
        {% for property in model.clas_properies -%}
        existing{{ model.class_name }}.set{{ property.name | convert_property_name }}(updated{{ model.class_name }}.get{{ property.name | convert_property_name }}());
        {% endfor %}

        // Save and return the updated entity
        return {{ model.repository_name }}.save(existing{{ model.class_name }});
    }

}
