// WARNING: This file was autogenerated by MBRS generator.
// Do not update it because if you run generator again you changes will be deleted

package ftn.backendservice.services;


import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;

import java.util.List;
import java.lang.Exception;
import ftn.backendservice.exception.exceptions.NotFoundException;
import ftn.backendservice.exception.exceptions.BadRequestException;
import java.util.Optional;

import ftn.backendservice.domain.entities.Customer;
import ftn.backendservice.domain.mappers.CustomerMapper;
import ftn.backendservice.domain.dtos.CustomerDto;
import ftn.backendservice.repositories.CustomerRepository;


@Service
@RequiredArgsConstructor
public class CustomerService {

    private final CustomerRepository customerRepository;

    public List<CustomerDto> getAll() {
        List<Customer> list = customerRepository.findAll();
        return CustomerMapper.INSTANCE.toDTO(list);
    }

    public CustomerDto getById(Long id) {
        Customer customer = customerRepository.findById(id).orElseThrow(() -> new NotFoundException("Customer not found with id: " + id));
        return CustomerMapper.INSTANCE.toDTO(customer);
    }

    public Customer save(Customer customer) {
        return customerRepository.save(customer);
    }

    public Customer update(Customer updatedCustomer) {
        // Check if the entyty exists in the database
        Customer existingCustomer = customerRepository.findById(updatedCustomer.getId())
                .orElseThrow(() -> new BadRequestException("Customer not found with id: " + updatedCustomer.getId()));

        // Update the properties
        existingCustomer.setId(updatedCustomer.getId());
        existingCustomer.setName(updatedCustomer.getName());
        existingCustomer.setSurname(updatedCustomer.getSurname());
        existingCustomer.setAccounts(updatedCustomer.getAccounts());
        existingCustomer.setEmail(updatedCustomer.getEmail());
        existingCustomer.setBankBranch(updatedCustomer.getBankBranch());
        

        // Save and return the updated entity
        return customerRepository.save(existingCustomer);
    }

}