// WARNING: This file was autogenerated by MBRS generator.
// Do not update it because if you run generator again you changes will be deleted

package ftn.backendservice.services;


import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;

import java.util.List;
import java.lang.Exception;
import ftn.backendservice.exception.exceptions.NotFoundException;
import ftn.backendservice.exception.exceptions.BadRequestException;
import java.util.Optional;

import ftn.backendservice.domain.entities.Transaction;
import ftn.backendservice.domain.mappers.TransactionMapper;
import ftn.backendservice.domain.dtos.TransactionDto;
import ftn.backendservice.repositories.TransactionRepository;


@Service
@RequiredArgsConstructor
public class TransactionService {

    private final TransactionRepository transactionRepository;

    public List<TransactionDto> getAll() {
        List<Transaction> list = transactionRepository.findAll();
        return TransactionMapper.INSTANCE.toDTO(list);
    }

    public TransactionDto getById(Long id) {
        Transaction transaction = transactionRepository.findById(id).orElseThrow(() -> new NotFoundException("Transaction not found with id: " + id));
        return TransactionMapper.INSTANCE.toDTO(transaction);
    }

    public Transaction save(Transaction transaction) {
        return transactionRepository.save(transaction);
    }

    public Transaction update(Transaction updatedTransaction) {
        // Check if the entyty exists in the database
        Transaction existingTransaction = transactionRepository.findById(updatedTransaction.getId())
                .orElseThrow(() -> new BadRequestException("Transaction not found with id: " + updatedTransaction.getId()));

        // Update the properties
        existingTransaction.setId(updatedTransaction.getId());
        existingTransaction.setAmount(updatedTransaction.getAmount());
        existingTransaction.setTransactionDate(updatedTransaction.getTransactionDate());
        

        // Save and return the updated entity
        return transactionRepository.save(existingTransaction);
    }

}