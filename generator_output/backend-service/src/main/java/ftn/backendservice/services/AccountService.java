// WARNING: This file was autogenerated by MBRS generator.
// Do not update it because if you run generator again you changes will be deleted

package ftn.backendservice.services;


import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;

import java.util.List;
import java.lang.Exception;
import ftn.backendservice.exception.exceptions.NotFoundException;
import ftn.backendservice.exception.exceptions.BadRequestException;
import java.util.Optional;

import ftn.backendservice.domain.entities.Account;
import ftn.backendservice.domain.mappers.AccountMapper;
import ftn.backendservice.domain.dtos.AccountDto;
import ftn.backendservice.repositories.AccountRepository;


@Service
@RequiredArgsConstructor
public class AccountService {

    private final AccountRepository accountRepository;

    public List<AccountDto> getAll() {
        List<Account> list = accountRepository.findAll();
        return AccountMapper.INSTANCE.toDTO(list);
    }

    public AccountDto getById(Long id) {
        Account account = accountRepository.findById(id).orElseThrow(() -> new NotFoundException("Account not found with id: " + id));
        return AccountMapper.INSTANCE.toDTO(account);
    }

    public Account save(Account account) {
        return accountRepository.save(account);
    }

    public Account update(Account updatedAccount) {
        // Check if the entyty exists in the database
        Account existingAccount = accountRepository.findById(updatedAccount.getId())
                .orElseThrow(() -> new BadRequestException("Account not found with id: " + updatedAccount.getId()));

        // Update the properties
        existingAccount.setId(updatedAccount.getId());
        existingAccount.setAccountNumber(updatedAccount.getAccountNumber());
        existingAccount.setBalance(updatedAccount.getBalance());
        existingAccount.setCustomer(updatedAccount.getCustomer());
        existingAccount.setTransactions(updatedAccount.getTransactions());
        

        // Save and return the updated entity
        return accountRepository.save(existingAccount);
    }

}