// WARNING: This file was autogenerated by MBRS generator.
// Do not update it because if you run generator again you changes will be deleted

package ftn.backendservice.services;


import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;

import java.util.List;
import java.lang.Exception;
import ftn.backendservice.exception.exceptions.NotFoundException;
import ftn.backendservice.exception.exceptions.BadRequestException;
import java.util.Optional;

import ftn.backendservice.domain.entities.BankBranch;
import ftn.backendservice.domain.mappers.BankBranchMapper;
import ftn.backendservice.domain.dtos.BankBranchDto;
import ftn.backendservice.repositories.BankBranchRepository;


@Service
@RequiredArgsConstructor
public class BankBranchService {

    private final BankBranchRepository bankBranchRepository;

    public List<BankBranchDto> getAll() {
        List<BankBranch> list = bankBranchRepository.findAll();
        return BankBranchMapper.INSTANCE.toDTO(list);
    }

    public BankBranchDto getById(Long id) {
        BankBranch bankBranch = bankBranchRepository.findById(id).orElseThrow(() -> new NotFoundException("BankBranch not found with id: " + id));
        return BankBranchMapper.INSTANCE.toDTO(bankBranch);
    }

    public BankBranch save(BankBranch bankBranch) {
        return bankBranchRepository.save(bankBranch);
    }

    public BankBranch update(BankBranch updatedBankBranch) {
        // Check if the entyty exists in the database
        BankBranch existingBankBranch = bankBranchRepository.findById(updatedBankBranch.getId())
                .orElseThrow(() -> new BadRequestException("BankBranch not found with id: " + updatedBankBranch.getId()));

        // Update the properties
        existingBankBranch.setId(updatedBankBranch.getId());
        existingBankBranch.setBranchName(updatedBankBranch.getBranchName());
        existingBankBranch.setLocation(updatedBankBranch.getLocation());
        

        // Save and return the updated entity
        return bankBranchRepository.save(existingBankBranch);
    }

}